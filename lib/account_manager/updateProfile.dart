import 'package:flutter/cupertino.dart';import 'package:flutter/material.dart';import 'package:cloud_firestore/cloud_firestore.dart';import 'package:firebase_auth/firebase_auth.dart';import 'package:form_field_validator/form_field_validator.dart';final FirebaseAuth _auth = FirebaseAuth.instance;CollectionReference usersDoc = FirebaseFirestore.instance.collection('users');class updateProfile extends StatefulWidget {  final User user;  const updateProfile({Key key, this.user}) : super(key: key);  @override  _updateProfileState createState() => _updateProfileState();}class _updateProfileState extends State<updateProfile> {  GlobalKey<FormState> formkey = GlobalKey<FormState>();  Stream datiUtente;  final TextEditingController _nameController = TextEditingController();  final TextEditingController _emailController = TextEditingController();  @override  void initState() {    datiUtente = FirebaseFirestore.instance        .collection('users')        .doc(widget.user.uid)        .snapshots();  }  @override  void dispose() {    // Clean up the controller when the Widget is disposed    _nameController.dispose();    _emailController.dispose();    super.dispose();  }  //Controllers for e-mail and password textfields.  final TextEditingController _nomeUtente = TextEditingController();  final TextEditingController _emailUtente = TextEditingController();  @override  Widget build(BuildContext context) {    return Scaffold(      appBar: PreferredSize(        preferredSize: AppBar().preferredSize,        child: Container(          child: AppBar(            title: Text("Dati personali"),            shape: RoundedRectangleBorder(                borderRadius: BorderRadius.only(                    bottomLeft: Radius.circular(30.0),                    bottomRight: Radius.circular(30.0))),            elevation: 8,            backgroundColor: Colors.lightBlue,            // actions: <Widget>[            //   Padding(            //     padding: EdgeInsets.all(12),            //     child: Container(            //       decoration: BoxDecoration(            //         color: Colors.grey,            //         borderRadius: BorderRadius.all(Radius.circular(15.0)),            //         boxShadow: [            //           BoxShadow(            //             color: Colors.grey.withOpacity(0.5),            //             spreadRadius: 5,            //             blurRadius: 7,            //             offset: Offset(0, 3), // changes position of shadow            //           ),            //         ],            //       ),            //       child: TextButton(            //         style: TextButton.styleFrom(backgroundColor: Colors.green),            //         onPressed: () async {            //           if (formkey.currentState.validate()) {            //             //await _updateUser();            //           } else {}            //         },            //         child: Text(            //           "Aggiorna",            //           style: TextStyle(color: Colors.white),            //         ),            //       ),            //     ),            //   )            // ],          ),        ),      ),      body: Center(        child: SingleChildScrollView(          child: Container(            padding: EdgeInsets.all(15),            child: Column(              crossAxisAlignment: CrossAxisAlignment.center,              mainAxisAlignment: MainAxisAlignment.center,              children: <Widget>[                Padding(                  padding:                      const EdgeInsets.only(left: 20, right: 20, bottom: 20.0),                  child: Text(                    "Puoi cambiare le tue informazioni e poi salvarle",                    style: TextStyle(fontSize: 20),                  ),                ),                Form(                  autovalidateMode: AutovalidateMode.always,                  key: formkey,                  child: Column(children: <Widget>[                    Container(                      child: Container(                        margin: const EdgeInsets.only(                            left: 20.0, right: 20.0, bottom: 20.0),                        padding: const EdgeInsets.only(top: 20.0, bottom: 20.0),                        decoration: BoxDecoration(                          color: const Color(0xD9e3f2fd),                          borderRadius: BorderRadius.all(Radius.circular(15.0)),                          boxShadow: [                            BoxShadow(                              color: Colors.grey.withOpacity(0.5),                              spreadRadius: 5,                              blurRadius: 7,                              offset:                                  Offset(0, 3), // changes position of shadow                            ),                          ],                        ),                        child: Column(                          children: <Widget>[                            Container(                              child: Text(                                'Nome utente:',                                style: TextStyle(                                    color: Colors.black, fontSize: 20),                              ),                            ),                            Container(                              margin: const EdgeInsets.only(                                  left: 20.0, right: 20.0, top: 5.0),                              constraints: const BoxConstraints(                                  minWidth: double.infinity),                              child: TextFormField(                                controller: _nomeUtente,                                keyboardType: TextInputType.name,                                decoration: InputDecoration(                                  border: OutlineInputBorder(),                                  labelText: widget.user.displayName,                                  labelStyle: TextStyle(color: Colors.black),                                ),                                validator: MultiValidator(                                  [                                    RequiredValidator(errorText: "* Required"),                                  ],                                ),                              ),                            ),                          ],                        ),                      ),                    ),                    Container(                      child: Container(                        margin: const EdgeInsets.only(                            left: 20.0, right: 20.0, bottom: 20.0),                        padding: const EdgeInsets.only(top: 20.0, bottom: 20.0),                        decoration: BoxDecoration(                          color: const Color(0xD9e3f2fd),                          borderRadius: BorderRadius.all(Radius.circular(15.0)),                          boxShadow: [                            BoxShadow(                              color: Colors.grey.withOpacity(0.5),                              spreadRadius: 5,                              blurRadius: 7,                              offset:                                  Offset(0, 3), // changes position of shadow                            ),                          ],                        ),                        child: Column(                          children: <Widget>[                            Container(                              child: Text(                                'Indirizzo email:',                                style: TextStyle(                                    color: Colors.black, fontSize: 20),                              ),                            ),                            Container(                              margin: const EdgeInsets.only(                                  left: 20.0, right: 20.0, top: 5.0),                              constraints: const BoxConstraints(                                  minWidth: double.infinity),                              child: TextFormField(                                controller: _emailUtente,                                keyboardType: TextInputType.emailAddress,                                decoration: InputDecoration(                                  border: OutlineInputBorder(),                                  labelText: widget.user.email,                                  labelStyle: TextStyle(color: Colors.black),                                ),                                validator: MultiValidator(                                  [                                    RequiredValidator(errorText: "* Required"),                                    EmailValidator(                                        errorText: "Enter valid email id"),                                  ],                                ),                              ),                            ),                          ],                        ),                      ),                    ),                  ]),                ),                Container(                  child: Container(                    margin: const EdgeInsets.only(                        left: 20.0, right: 20.0, bottom: 20.0),                    padding: const EdgeInsets.only(top: 20.0, bottom: 20.0),                    decoration: BoxDecoration(                      color: const Color(0xD9e3f2fd),                      borderRadius: BorderRadius.all(Radius.circular(15.0)),                      boxShadow: [                        BoxShadow(                          color: Colors.grey.withOpacity(0.5),                          spreadRadius: 5,                          blurRadius: 7,                          offset: Offset(0, 3), // changes position of shadow                        ),                      ],                    ),                    child: Column(                      children: <Widget>[                        Container(                          child: Text(                            'Identificatore utente:',                            style: TextStyle(color: Colors.black, fontSize: 20),                          ),                        ),                        Container(                          margin: const EdgeInsets.only(                              left: 20.0, right: 20.0, top: 5.0),                          padding: const EdgeInsets.all(10),                          constraints:                              const BoxConstraints(minWidth: double.infinity),                          decoration: BoxDecoration(                            border: Border.all(color: Colors.lightBlue),                            borderRadius: BorderRadius.circular(15),                          ),                            child: FittedBox(                              fit: BoxFit.fitWidth,                              child: Text(                                widget.user.uid,                                style:                                    TextStyle(color: Colors.black, fontSize: 20),                              ),                            ),                        ),                      ],                    ),                  ),                ),                Container(                  child: Container(                    margin: const EdgeInsets.only(                        left: 20.0, right: 20.0, bottom: 20.0),                    padding: const EdgeInsets.only(top: 20.0, bottom: 20.0),                    decoration: BoxDecoration(                      color: const Color(0xD9e3f2fd),                      borderRadius: BorderRadius.all(Radius.circular(15.0)),                      boxShadow: [                        BoxShadow(                          color: Colors.grey.withOpacity(0.5),                          spreadRadius: 5,                          blurRadius: 7,                          offset: Offset(0, 3), // changes position of shadow                        ),                      ],                    ),                    child: Column(                      children: <Widget>[                        Container(                          child: Text(                            'Puoi cambiare la tua password:',                            style: TextStyle(color: Colors.black, fontSize: 20),                            textAlign: TextAlign.left,                          ),                        ),                        Container(                          margin: const EdgeInsets.only(                              left: 20.0, right: 20.0, top: 5.0),                          constraints:                              const BoxConstraints(minWidth: double.infinity),                          decoration: BoxDecoration(                            border: Border.all(color: Colors.lightBlue),                            borderRadius: BorderRadius.circular(15),                          ),                          child: TextButton(                            onPressed: () {                              _displayTextInputDialog(context);                            },                            child: Text(                              "*********",                              style:                                  TextStyle(color: Colors.black, fontSize: 20),                            ),                          ),                        ),                      ],                    ),                  ),                ),                Row(                  children: [                    Expanded(                      child: Container(                        margin: const EdgeInsets.only(                            left: 30.0, right: 20.0, bottom: 20.0),                        padding: const EdgeInsets.only(top: 20.0, bottom: 20.0),                        height: 60,                        decoration: BoxDecoration(                          color: Colors.grey,                          borderRadius: BorderRadius.all(Radius.circular(15.0)),                          boxShadow: [                            BoxShadow(                              color: Colors.grey.withOpacity(0.5),                              spreadRadius: 5,                              blurRadius: 7,                              offset:                                  Offset(0, 3), // changes position of shadow                            ),                          ],                        ),                        child: TextButton(                          onPressed: () async {                            try {                              await FirebaseAuth.instance.currentUser.delete();                              await deleteUser();                            } on FirebaseAuthException catch (e) {                              if (e.code == 'requires-recent-login') {                                print(                                    'The user must reauthenticate before this operation can be executed.');                              }                            }                          },                          child: FittedBox(                            fit: BoxFit.fitWidth,                            child: Text(                              "Cancella account",                              style:                                  TextStyle(color: Colors.black, fontSize: 20),                            ),                          ),                        ),                      ),                    ),                    Expanded(                      child: Container(                        child: Container(                          margin: const EdgeInsets.only(                              left: 20.0, right: 30.0, bottom: 20.0),                          padding:                              const EdgeInsets.only(top: 20.0, bottom: 20.0),                          height: 80,                          decoration: BoxDecoration(                            color: Colors.red,                            borderRadius:                                BorderRadius.all(Radius.circular(15.0)),                            boxShadow: [                              BoxShadow(                                color: Colors.grey.withOpacity(0.5),                                spreadRadius: 5,                                blurRadius: 7,                                offset:                                    Offset(0, 3), // changes position of shadow                              ),                            ],                          ),                          child: TextButton(                            onPressed: () {                              _signOut();                            },                            child: FittedBox(                              fit: BoxFit.fitWidth,                              child: Text(                                "Esci",                                style: TextStyle(                                    color: Colors.black, fontSize: 20),                              ),                            ),                          ),                        ),                      ),                    )                  ],                )              ],            ),          ),        ),      ),    );  }  Future<void> _signOut() async {    await _auth.signOut();  }  Future<void> deleteUser() {    return usersDoc        .doc(widget.user.uid)        .delete()        .then((value) => print("User Deleted"))        .catchError((error) => print("Failed to delete user: $error"));  }  Future<void> _displayTextInputDialog(BuildContext context) async {    return showDialog(      context: context,      builder: (context) {        return AlertDialog(          title: Text('Reset Password'),          content: Column(            mainAxisSize: MainAxisSize.min,            children: <Widget>[              Text(                  "Verrà inviata una email dove ci sarà un link dove potrai cambiare la tua password. ATTENZIONE verrai fatto uscire dalla applicazione."),              SizedBox(                height: 20,              ),              Text(                widget.user.email,                style: TextStyle(fontSize: 20),              ),            ],          ),          actions: <Widget>[            TextButton(              style: TextButton.styleFrom(                primary: Colors.white,                backgroundColor: Colors.red,              ),              child: Text('CANCEL'),              onPressed: () {                setState(() {                  Navigator.pop(context);                });              },            ),            TextButton(              style: TextButton.styleFrom(                primary: Colors.white,                backgroundColor: Colors.green,              ),              child: Text(                'OK',              ),              onPressed: () async {                await _auth                    .sendPasswordResetEmail(email: widget.user.email)                    .then((value) => _auth.signOut())                    .catchError((error) => null);                ScaffoldMessenger.of(context).showSnackBar(SnackBar(                  content: Text('Email inviata'),                ));                Navigator.pop(context);              },            ),          ],        );      },    );  }  // Future<void> _updateUser() async {  //   if (_nameController.text != widget.user.displayName) {  //     CollectionReference users =  //         FirebaseFirestore.instance.collection('users');  //     await widget.user  //         .updateProfile(displayName: _nameController.text)  //         .then((value) {  //       users  //           .doc(widget.user.uid)  //           .update({'username': _nameController.text})  //           .then((value) => print("User Updated"))  //           .catchError((error) => print("Failed to update user: $error"));  //     });  //   }  //   if (_emailController.text != widget.user.email) {  //     widget.user.updateEmail(_emailController.text)  //       ..then((value) => print("User Updated"))  //           .catchError((error) => print("Failed to update user: $error"));  //   }  // }}